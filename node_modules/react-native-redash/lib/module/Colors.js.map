{"version":3,"sources":["Colors.ts"],"names":["Animated","processColor","cond","add","multiply","lessThan","abs","modulo","round","interpolate","divide","sub","color","Extrapolate","opacity","c","red","green","blue","match","condsAndResPairs","offset","length","undefined","colorHSV","h","s","v","hh","x","m","colorRGB","r","g","b","rgbToHsv","ma","Math","max","mi","min","d","interpolateColorsHSV","animationValue","inputRange","colors","colorsAsHSV","map","outputRange","extrapolate","CLAMP","interpolateColorsRGB","a","interpolateColor","value","config","colorSpace","bInterpolateColor","color1","color2"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  modulo,\n  round,\n  interpolate,\n  divide,\n  sub,\n  color,\n  Extrapolate,\n} = Animated;\n\ntype Color = Animated.Adaptable<string> | Animated.Adaptable<number>;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nfunction match(\n  condsAndResPairs: readonly Animated.Node<number>[],\n  offset = 0\n): undefined | Animated.Node<number> {\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  }\n  if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n  return cond(\n    condsAndResPairs[offset],\n    condsAndResPairs[offset + 1],\n    match(condsAndResPairs, offset + 2)\n  );\n}\n\nfunction colorHSV(\n  h: Animated.Adaptable<number> /* 0 - 360 */,\n  s: Animated.Adaptable<number> /* 0 - 1 */,\n  v: Animated.Adaptable<number> /* 0 - 1 */\n): Animated.Node<number> {\n  // Converts color from HSV format into RGB\n  // Formula explained here: https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n  const c = multiply(v, s);\n  const hh = divide(h, 60);\n  const x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n\n  const m = sub(v, c);\n\n  const colorRGB = (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) =>\n    color(\n      round(multiply(255, add(r, m))),\n      round(multiply(255, add(g, m))),\n      round(multiply(255, add(b, m)))\n    );\n\n  return match([\n    lessThan(h, 60),\n    colorRGB(c, x, 0),\n    lessThan(h, 120),\n    colorRGB(x, c, 0),\n    lessThan(h, 180),\n    colorRGB(0, c, x),\n    lessThan(h, 240),\n    colorRGB(0, x, c),\n    lessThan(h, 300),\n    colorRGB(x, 0, c),\n    colorRGB(c, 0, x) /* else */,\n  ]) as Animated.Node<number>;\n}\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h: h * 360, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.h),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.s),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.v),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  return colorHSV(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => red(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => green(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => blue(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map((c) => opacity(c)),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: Color[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const bInterpolateColor = (\n  value: Animated.Adaptable<number>,\n  color1: Color,\n  color2: Color,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2],\n    },\n    colorSpace\n  );\n"]}
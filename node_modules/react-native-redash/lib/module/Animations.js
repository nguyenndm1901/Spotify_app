import _slicedToArray from"@babel/runtime/helpers/slicedToArray";import _toConsumableArray from"@babel/runtime/helpers/toConsumableArray";import Animated from"react-native-reanimated";import{useMemoOne}from"use-memo-one";import{min}from"./Math";var Clock=Animated.Clock,Value=Animated.Value,set=Animated.set,add=Animated.add,multiply=Animated.multiply,cond=Animated.cond,eq=Animated.eq,abs=Animated.abs,sub=Animated.sub,not=Animated.not,diff=Animated.diff,lessThan=Animated.lessThan,greaterThan=Animated.greaterThan,useCode=Animated.useCode,divide=Animated.divide,modulo=Animated.modulo,proc=Animated.proc;export var moving=function moving(position){var minPositionDelta=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1e-3;var emptyFrameThreshold=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;var delta=diff(position);var noMovementFrames=new Value(0);return cond(lessThan(abs(delta),minPositionDelta),[set(noMovementFrames,add(noMovementFrames,1)),not(greaterThan(noMovementFrames,emptyFrameThreshold))],[set(noMovementFrames,0),1]);};export var snapPoint=function snapPoint(value,velocity,points){var point=add(value,multiply(0.2,velocity));var diffPoint=function diffPoint(p){return abs(sub(point,p));};var deltas=points.map(function(p){return diffPoint(p);});var minDelta=min.apply(void 0,_toConsumableArray(deltas));return points.reduce(function(acc,p){return cond(eq(diffPoint(p),minDelta),p,acc);},new Value());};export var bInterpolate=proc(function(value,origin,destination){return add(origin,multiply(value,sub(destination,origin)));});export var useValues=function useValues(values,deps){return useMemoOne(function(){return values.map(function(v){return new Value(v);});},deps);};export var useNamedValues=function useNamedValues(values,deps){return useMemoOne(function(){var result={};Object.keys(values).forEach(function(key){result[key]=new Value(values[key]);});return result;},deps);};export var useClocks=function useClocks(numberOfClocks,deps){return useMemoOne(function(){return new Array(numberOfClocks).fill(0).map(function(){return new Clock();});},[deps]);};export var useDiff=function useDiff(node,deps){var _useValues=useValues([0],deps),_useValues2=_slicedToArray(_useValues,1),dDiff=_useValues2[0];useCode(function(){return set(dDiff,diff(node));},[dDiff,node]);return dDiff;};export var addTo=proc(function(value,node){return set(value,add(value,node));});export var subTo=proc(function(value,node){return set(value,sub(value,node));});export var multiplyTo=proc(function(value,node){return set(value,multiply(value,node));});export var divideTo=proc(function(value,node){return set(value,divide(value,node));});export var moduloTo=proc(function(value,node){return set(value,modulo(value,node));});
//# sourceMappingURL=Animations.js.map
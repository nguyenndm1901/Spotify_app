{"version":3,"sources":["Math.ts"],"names":["Animated","set","cond","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","reRound","round","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","bin","value","inc","dec","args","reduce","acc","arg","clamp","lowerBound","upperBound","between","inclusive","approximates","a","b","precision","toRad","deg","Math","PI","toDeg","rad","atan2","y","x","coeff1","coeff2","absY","angle","cubicBezier","t","p0","p1","p2","p3","term","c","d","p"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  set,\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  round: reRound,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc,\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const inc = proc((value: Animated.Value<number>) =>\n  set(value, add(value, 1))\n);\n\nexport const dec = proc((value: Animated.Value<number>) =>\n  set(value, sub(value, 1))\n);\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = proc(\n  (\n    value: Animated.Adaptable<number>,\n    lowerBound: Animated.Adaptable<number>,\n    upperBound: Animated.Adaptable<number>\n  ): Animated.Node<number> => min2(max2(lowerBound, value), upperBound)\n);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = proc(\n  (\n    a: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0.001\n  ) => lessThan(abs(sub(a, b)), precision)\n);\n\nexport const toRad = proc(\n  (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(deg, Math.PI / 180)\n);\n\nexport const toDeg = proc(\n  (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(rad, 180 / Math.PI)\n);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\nexport const atan2 = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const coeff1 = Math.PI / 4;\n    const coeff2 = 3 * coeff1;\n    const absY = abs(y);\n    const angle = cond(\n      greaterOrEq(x, 0),\n      [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))],\n      [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]\n    );\n    return cond(lessThan(y, 0), multiply(angle, -1), angle);\n  }\n);\n\nexport const cubicBezier = proc(\n  (\n    t: Animated.Adaptable<number>,\n    p0: Animated.Adaptable<number>,\n    p1: Animated.Adaptable<number>,\n    p2: Animated.Adaptable<number>,\n    p3: Animated.Adaptable<number>\n  ): Animated.Node<number> => {\n    const term = sub(1, t);\n    const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n    const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n    const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n    const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n    return add(a, b, c, d);\n  }\n);\n\nexport const round = proc(\n  (\n    value: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0\n  ) => {\n    const p = pow(10, precision);\n    return divide(reRound(multiply(value, p)), p);\n  }\n);\n"]}